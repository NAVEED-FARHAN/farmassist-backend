from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import json
import base64
import os
import sqlite3
from datetime import datetime
import re
import random

# Initialize Flask app
app = Flask(__name__)
CORS(app)
app.config['SECRET_KEY'] = 'farmassist_hackathon_2025'

# Constants
OPENWEATHER_API_KEY = os.environ.get('OPENWEATHER_API_KEY', 'demo_key')
WEATHER_API_URL = "http://api.openweathermap.org/data/2.5"

# Pest detection database (simplified for demo)
PEST_DATABASE = {
    "aphids": {
        "name_hi": "рдорд╛рд╣реВ/рдПрдлрд┐рдбреНрд╕",
        "treatment_hi": "рдиреАрдо рдХрд╛ рддреЗрд▓ рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ рдпрд╛ рд╕рд╛рдмреБрди рдХреЗ рдкрд╛рдиреА рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ",
    },
    "bollworm": {
        "name_hi": "рд╕реБрдВрдбреА/рдмреЙрд▓рд╡рд░реНрдо", 
        "treatment_hi": "BT рд╕реНрдкреНрд░реЗ рдпрд╛ рдкреНрд░рд╛рдХреГрддрд┐рдХ рдХреАрдЯрдирд╛рд╢рдХ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ",
    },
    "leaf_blight": {
        "name_hi": "рдкрддреНрддреА рдЭреБрд▓рд╕рд╛ рд░реЛрдЧ",
        "treatment_hi": "рдХреЙрдкрд░ рд╕рд▓реНрдлреЗрдЯ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ рдФрд░ рдкрд╛рдиреА рдХрдо рджреЗрдВ",
    },
    "powdery_mildew": {
        "name_hi": "рдЪреВрд░реНрдгрд┐рд▓ рдЖрд╕рд┐рддрд╛",
        "treatment_hi": "рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рдХрд╛ рдШреЛрд▓ рдпрд╛ рд╕рд▓реНрдлрд░ рдкрд╛рдЙрдбрд░ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ",
    }
}

# Distress keywords
DISTRESS_KEYWORDS = ["рдирд┐рд░рд╛рд╢", "рдЖрддреНрдорд╣рддреНрдпрд╛", "рдХрд░реНрдЬ", "рдЕрд╕рдлрд▓", "suicide", "hopeless", "debt", "failure"]

# Market prices (demo data)
MARKET_PRICES = {
    "wheat": {"price": 2150, "change": 3.2},
    "rice": {"price": 1890, "change": -1.5},
    "cotton": {"price": 5650, "change": 2.8},
}

def detect_distress(message):
    """Simple distress detection"""
    message_lower = message.lower()
    for keyword in DISTRESS_KEYWORDS:
        if keyword in message_lower:
            return True
    return False

def get_weather_data(lat, lon):
    """Fetch weather from OpenWeatherMap"""
    try:
        if OPENWEATHER_API_KEY == 'demo_key':
            # Return demo data if no real API key
            return {
                "main": {"temp": 32, "humidity": 65},
                "weather": [{"description": "clear sky"}]
            }
        
        url = f"{WEATHER_API_URL}/weather"
        params = {
            "lat": lat, "lon": lon,
            "appid": OPENWEATHER_API_KEY,
            "units": "metric"
        }
        response = requests.get(url, params=params, timeout=5)
        return response.json() if response.status_code == 200 else None
    except:
        return {
            "main": {"temp": 32, "humidity": 65},
            "weather": [{"description": "clear sky"}]
        }

@app.route('/')
def home():
    return jsonify({"message": "FarmAssist API is running!", "version": "1.0"})

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        message = data.get('message', '')
        language = data.get('language', 'hi')
        location = data.get('location', '28.6139,77.2090')
        
        if not message:
            return jsonify({"error": "Message required"}), 400
        
        # Check for distress
        is_distressed = detect_distress(message)
        
        # Generate response
        response = generate_response(message, language, location, is_distressed)
        
        return jsonify({
            "reply": response,
            "is_alert": is_distressed,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generate_response(message, language, location, is_distressed):
    message_lower = message.lower()
    
    # Handle distress
    if is_distressed:
        return """рдореИрдВ рд╕рдордЭ рд╕рдХрддрд╛ рд╣реВрдВ рдХрд┐ рдпрд╣ рдореБрд╢реНрдХрд┐рд▓ рд╕рдордп рд╣реИред 

ЁЯУЮ рддреБрд░рдВрдд рдорджрдж:
тАв рдХрд┐рд╕рд╛рди рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 1800-180-1551  
тАв рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп: 1800-599-0019

ЁЯТб рдпрд╛рдж рд░рдЦреЗрдВ: рд╣рд░ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╣рд▓ рд╣реИред"""
    
    # Weather queries
    if any(word in message_lower for word in ["weather", "рдореМрд╕рдо", "rain", "рдмрд╛рд░рд┐рд╢"]):
        lat, lon = map(float, location.split(','))
        weather = get_weather_data(lat, lon)
        temp = weather['main']['temp']
        humidity = weather['main']['humidity']
        
        return f"ЁЯМдя╕П рдореМрд╕рдо:\nтАв рддрд╛рдкрдорд╛рди: {temp}┬░C\nтАв рдирдореА: {humidity}%\n\nЁЯТб рд╕рд▓рд╛рд╣: рддрд╛рдкрдорд╛рди {temp}┬░C рд╣реИред {'рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ' if temp > 30 else 'рд╕рд╛рдорд╛рдиреНрдп рджреЗрдЦрднрд╛рд▓ рдХрд░реЗрдВ'}ред"
    
    # Market prices
    elif any(word in message_lower for word in ["price", "рджрд╛рдо", "рднрд╛рд╡", "wheat", "рдЧреЗрд╣реВрдВ"]):
        crop = "wheat"
        price_data = MARKET_PRICES[crop]
        change = f"тЖС{price_data['change']}%" if price_data['change'] > 0 else f"тЖУ{abs(price_data['change'])}%"
        
        return f"ЁЯТ░ рдЖрдЬ рдХрд╛ рднрд╛рд╡:\nрдЧреЗрд╣реВрдВ: тВ╣{price_data['price']}/рдХреНрд╡рд┐рдВрдЯрд▓\nрдХрд▓ рд╕реЗ: {change}\n\nЁЯУИ рдЕрдЪреНрдЫрд╛ рднрд╛рд╡ рд╣реИ!"
    
    # Pest detection
    elif any(word in message_lower for word in ["pest", "рдХреАрдЯ", "disease", "рдмреАрдорд╛рд░реА"]):
        return "ЁЯФН рдХреАрдЯ рдХреА рдкрд╣рдЪрд╛рди рдХреЗ рд▓рд┐рдП:\n\n1я╕ПтГг рдкреМрдзреЗ рдХреА рддрд╕реНрд╡реАрд░ рдЦреАрдВрдЪреЗрдВ\n2я╕ПтГг рдХреИрдорд░рд╛ рдмрдЯрди рджрдмрд╛рдПрдВ\n3я╕ПтГг рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ\n\nрдореИрдВ рддреБрд░рдВрдд рдЙрдкрдЪрд╛рд░ рдмрддрд╛рдКрдВрдЧрд╛!"
    
    # Default response
    else:
        return """рдирдорд╕реНрддреЗ! рдореИрдВ FarmAssist рд╣реВрдВред рдореИрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:

ЁЯМдя╕П рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА
ЁЯТ░ рдмрд╛рдЬрд╝рд╛рд░ рдХреЗ рджрд╛рдо  
ЁЯФН рдХреАрдЯ-рд░реЛрдЧ рдХреА рдкрд╣рдЪрд╛рди
ЁЯМ▒ рдлрд╕рд▓ рдХреА рд╕рд▓рд╛рд╣
ЁЯУЮ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдорджрдж

рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓ рдХреНрдпрд╛ рд╣реИ?"""

@app.route('/api/detect_pest', methods=['POST'])
def detect_pest():
    try:
        data = request.json
        image_data = data.get('image', '')
        
        # Simulate pest detection
        pest_types = list(PEST_DATABASE.keys())
        detected_pest = random.choice(pest_types)
        pest_info = PEST_DATABASE[detected_pest]
        
        return jsonify({
            "pest_name": pest_info['name_hi'],
            "treatment": pest_info['treatment_hi'], 
            "confidence": 0.85
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/weather_alert', methods=['GET'])
def weather_alert():
    try:
        lat = float(request.args.get('lat', 28.6139))
        lon = float(request.args.get('lon', 77.2090))
        
        weather = get_weather_data(lat, lon)
        temp = weather['main']['temp']
        
        if temp > 35:
            alert = f"ЁЯМбя╕П рддреЗрдЬрд╝ рдЧрд░реНрдореА ({temp}┬░C)! рдЕрдзрд┐рдХ рдкрд╛рдиреА рджреЗрдВред"
        elif temp < 10:
            alert = f"ЁЯе╢ рдардВрдб ({temp}┬░C)! рдкрд╛рд▓реЗ рд╕реЗ рдмрдЪрд╛рдПрдВред"
        else:
            alert = f"ЁЯМдя╕П рдореМрд╕рдо рд╕рд╛рдорд╛рдиреНрдп ({temp}┬░C)ред рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рдХрд░реЗрдВред"
            
        return jsonify({"alert": alert})
    except Exception as e:
        return jsonify({"alert": "рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
